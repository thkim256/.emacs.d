#+TITLE: Emacs configuration file
#+AUTHOR: thkim256
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2 num:nil ^:nil \n:t

* About
이 설정파일은 [[http://orgmode.org][Org mode]]로 작성된 이맥스 구성 파일이다.

#+begin_src sh :tangle no
git clone https://github.com/thkim256/.emacs.d.git ~/.emacs.d
#+end_src

* Configurations
** Meta

=init.el= 파일을 해당 파일로 replace하는 방식으로 구성 파일을 설정.

#+begin_src emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.
(set-language-environment "UTF-8")

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

자동 생성되는 =init.el= 의 =git= 추적 OFF

#+begin_src sh :tangle no
git update-index --assume-unchanged init.el
# git update-index --no-assume-unchanged init.el
#+end_src

init-file을 lexical scope로 설정되도록 구성

c.f. [[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][DynamicBinding Vs LexicalBinding]]

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

=init.el= 파일 추출

#+begin_src emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src

=private.el= 에 개인 구성 파일을 설정하고 있다면 같이 로딩한다.

#+begin_src emacs-lisp
(add-hook
 'after-init-hook
 (lambda ()
   (let ((private-file (concat user-emacs-directory "private.el")))
     (when (file-exists-p private-file)
       (load-file private-file)))))
#+end_src

** Packages
패키지 로딩

#+begin_src emacs-lisp
(require 'package)
(package-initialize)
#+end_src

패키지 미러 추가

#+begin_src emacs-lisp
(custom-set-variables
 '(gnutls-algorithm-priority "normal:-vers-tls1.3"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
#+end_src

전체 설치 패키지 모음

#+begin_src emacs-lisp
(let* ((package--builtins nil)
       (packages
        '(
          ;;;; Extension
          use-package                   ; 패키지 관리자
          auto-compile                  ; Emacs Lisp 라이브러리 컴파일러
          which-key                     ; 사용가능한 키 바인딩 표시
          vterm                         ; 터미널 에뮬레이터
          diff-hl                       ; Git 커밋되지 않은 변경사항 강조
          magit                         ; Git 유틸
          page-break-lines              ; 페이지 나누기(^L) 표시 변경
          flycheck                      ; 구문 오류 분석
          popup                         ; 툴팁
          google-translate              ; 구글 번역

          ;;;; Evil
          evil                          ; Vim mode support
          evil-collection               ; Evil Collection
          evil-org                      ; Evil org

          ;;;; Buffer Utilities
          olivetti                      ; 화면 중앙으로 버퍼 변경 (80줄 표시)
          multiple-cursors              ; 멀티 커서
          paredit                       ; 괄호 편집 유틸
          yasnippet-snippets            ; 스니펫 모음
          expand-region                 ; 선택 영역 늘리고 줄이는 유틸 (단어, 스코프)

          ;;;; Completion
          company                       ; 텍스트 완성 프레임워크
          counsel                       ; Ivy 완성 기능
          ivy-rich                      ; Ivy 풍부한 디스플레이
          smex                          ; M-x Ido-style fuzzy matching

          ;;;; File Manager
          projectile                    ; 프로젝트 관리 네비게이션
          counsel-projectile            ; projectile ivy 통합
          treemacs                      ; 트리 형식의 파일 관리 매니저
          treemacs-evil                 ; treemacs evil 통합
          treemacs-projectile           ; treemacs projectile 통합

          ;;; RSS Feed
          elfeed                        ; rss feed 리더기
          elfeed-org                    ; elfeed org형식의 인덱스

          ;;; Mu4e
          mu4e-alert

          ;;; org-journal
          org-journal

          ;;;; Language Server Protocol
          lsp-mode                      ; LSP mode
          lsp-ui                        ; LSP UI
          lsp-treemacs                  ; LSP treemacs 통합
          dap-mode                      ; Debug
          lsp-java                      ; Java

          ;;;; Golang
          go-mode                       ; Golang
          ob-go                         ; Golang org babel
          go-tag                        ; Golang support tag

          ;;;; Theme
          zenburn-theme

          ;;;; Other Special Mode
          vlf                           ; View Large File
          highlight-indentation         ; 들여쓰기 표시
          adoc-mode                     ; Asciidoc
          rfc-mode                      ; RFC
          js2-mode                      ; Javascript
          json-mode                     ; Json
          k8s-mode                      ; Kubernetes
          markdown-mode                 ; Markdown
          dockerfile-mode               ; Dockerfile
          groovy-mode                   ; Groovy
          plantuml-mode                 ; Plantuml
          ox-gfm                        ; org -> github 스타일의 마크다운 내보내기
          )))
  (when (memq window-system '(mac ns))
    (push 'exec-path-from-shell packages)
    (push 'reveal-in-osx-finder packages))
  (let ((packages (seq-remove 'package-installed-p packages)))
    (print packages)
    (when packages
      ;; Install uninstalled packages
      (package-refresh-contents)
      (mapc 'package-install packages))))
#+end_src

미러에서 받을 수 없는 확장 패키지 로딩한다.

#+begin_src emacs-lisp
(let ((default-directory (concat user-emacs-directory "site-lisp/")))
  (when (file-exists-p default-directory)
    (setq load-path
          (append
           (let ((load-path (copy-sequence load-path)))
             (normal-top-level-add-subdirs-to-load-path)) load-path))))
#+end_src

** Mac OS X
Mac OS에서의 기본 설정

#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
  (setq ns-pop-up-frames nil
        mac-option-modifier nil
        mac-command-modifier 'meta
        exec-path-from-shell-variables '("PATH" "TMPDIR" "GOROOT" "GOPATH" "JAVA_HOME"))
  (exec-path-from-shell-initialize)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))
#+end_src

** Sane defaults
유용한 버퍼와 관련된 기본 설정을 추가한다.

#+begin_src emacs-lisp
(setq auto-revert-interval 1            ; Refresh buffers fast
      warning-minimum-level :emergency  ; Native comp warning disable
      echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 100       ; Show more recent files
      ring-bell-function 'ignore        ; Quiet
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      vc-handled-backends nil           ; Ignore Default VCS (use magit)
      ad-redefinition-action 'accept    ; ad-handle-definition Warning ignore
      custom-file                       ; Customizations in a separate file
      (concat user-emacs-directory "custom.el"))
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
  (setq mac-pass-command-to-system nil))
#+end_src

전역 버퍼 설정을 추가한다.

#+begin_src emacs-lisp
(setq-default tab-width 2                       ; Smaller tabs
              fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              frame-resize-pixelwise t          ; Fine-grained frame resize
              ;; auto-fill-function 'do-auto-fill  ; Auto-fill-mode everywhere
              )
#+end_src

기타 유용한 기본 설정

#+begin_src emacs-lisp
;; 시스템 기본 =utf-8=
(set-language-environment "UTF-8")
;; 간편 응답
(fset 'yes-or-no-p 'y-or-n-p)
;; 경고음 끄기
(put 'narrow-to-region 'disabled nil)
;; 디스크 파일 변경 시, 자동 반영
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
;; whitespace remove
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; 메뉴바 끄기
(menu-bar-mode -1)
;; 툴바 끄기
(tool-bar-mode -1)
;; 터미널 모드에서만 동작
(unless (display-graphic-p)
  ;;
  )
#+end_src

자동 저장 파일을 단일 디렉토리에 저장한다.

#+begin_src emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "auto-save-list/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src

** Modes
비활성화 모드

#+begin_src emacs-lisp
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text
           scroll-bar-mode              ; No scroll bars either
           blink-cursor-mode))          ; The blinking cursor gets old
  (funcall mode 0))
#+end_src

활성화 모드

#+begin_src emacs-lisp
(dolist (mode
         '(abbrev-mode                      ; E.g. sopl -> System.out.println
           column-number-mode               ; Show column number in mode line
           delete-selection-mode            ; Replace selected text
           dirtrack-mode                    ; directory tracking in *shell*
           global-company-mode              ; Auto-completion everywhere
           ;; global-diff-hl-mode              ; Highlight uncommitted changes
           global-so-long-mode              ; Mitigate performance for long lines
           global-display-line-numbers-mode ; Buffer display line
           counsel-projectile-mode          ; Manage and navigate projects
           recentf-mode                     ; Recently opened files
           show-paren-mode                  ; Highlight matching parentheses
           which-key-mode))                 ; Available keybindings in popup
  (funcall mode 1))
#+end_src

** Encrypt
#+begin_src emacs-lisp
;; (require 'epa-file)
;; (epa-file-enable)
(require 'org-crypt)
;; (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
(setq org-crypt-key nil)
(setq epa-file-select-keys nil)
;; 암호문구를 이맥스 안에서 실행
(setq epg-pinentry-mode 'loopback)
#+end_src

** Page Breaks
 (C-q C-l) --> pretty view
#+begin_src emacs-lisp
(require 'page-break-lines)
#+end_src

** Ibuffer
#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer)
(setq ibuffer-expert t
      ibuffer-default-sorting-mode 'major-mode)
(add-hook 'ibuffer-mode-hook
          #'(lambda ()
             ;; (add-to-list 'ibuffer-never-show-predicates "^\\*")
             (ibuffer-auto-mode 1)
             ))
#+end_src
** Visual

#+begin_src emacs-lisp
(load-theme 'zenburn t)
#+end_src

테마 사이클 변경

#+begin_src emacs-lisp
(defun cycle-themes ()
  "Returns a function that lets you cycle your themes."
  (let ((themes '#1=(leuven zenburn . #1#)))
    (lambda ()
      (interactive)
      ;; Rotates the thme cycle and changes the current theme.
      (load-theme (car (setq themes (cdr themes))) t)
      (message (concat "Switched to " (symbol-name (car themes)))))))
#+end_src

폰트 설정

#+begin_src emacs-lisp
;; |01234567|
;; |abcdefgh|
;; |ABCDEFGH|
;; |--------|
;; |일바이트|
(defun set-font (font size)
  "font 변경"
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Font: " (font-family-list) nil t)
           (read-number "Size: "))))
  (when (member font (font-family-list))
    (set-face-font 'default (font-spec :family font :size size))))

(set-font "M+ 1m" 14)
#+end_src


New in Emacs 24.4 is the =prettify-symbols-mode=! It's neat.

#+begin_src emacs-lisp
(setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                       ("delta" . ?Δ)
                                       ("gamma" . ?Γ)
                                       ("phi" . ?φ)
                                       ("psi" . ?ψ)))
#+end_src

[[https://github.com/rnkn/olivetti][Olivetti]] is a package that simply centers the text of a buffer. It is very
simple and beautiful. The default width is just a bit short.

#+begin_src emacs-lisp
(with-eval-after-load 'olivetti
  (setq-default olivetti-body-width 82)
  (remove-hook 'olivetti-mode-on-hook 'visual-line-mode))
#+end_src

** Evil
#+begin_src emacs-lisp
(require 'evil)
(require 'evil-collection)
(setq evil-want-keybinding nil)
(evil-mode t)
(evil-collection-init)

(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

;; :q should kill the current buffer rather than quitting emacs entirely
(evil-ex-define-cmd "q" 'kill-this-buffer)
;; Need to type out :quit to close emacs
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

** Ivy

Let's try [[http://oremacs.com/swiper/][Ivy]] in favor of helm.

#+begin_src emacs-lisp
(setq ivy-wrap t
      ivy-height 25
      ivy-use-virtual-buffers t
      ivy-count-format "(%d/%d) "
      ivy-on-del-error-function 'ignore)
(ivy-mode t)
(ivy-rich-mode t)
#+end_src

fuzzy설정으로 인하여, 파일생성 등을 원할하게 할 수 없는 부분 수정(disable)

#+begin_src emacs-lisp
(setq read-file-name-function
      (lambda (&rest args)
        (let ((completing-read-function #'completing-read-default))
          (apply #'read-file-name-default args))))

(define-key counsel-mode-map [remap find-file] nil)
#+end_src

** Translate
구글 번역 설정

#+begin_src emacs-lisp
(require 'google-translate)
(require 'google-translate-default-ui)
;; https://github.com/atykhonov/google-translate/issues/137
(defun google-translate--search-tkk ()
  "Search TKK."
  (list 430675 2721866130))

(setq google-translate-default-source-language "en"
      google-translate-default-target-language "ko"
      google-translate-output-destination nil)
#+end_src

** Completion
자동 완성 기능 [[http://company-mode.github.io/][company-mode]]

#+begin_src emacs-lisp
(setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance))
#+end_src

** Org

시작 시 자동 폴딩

#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src

소스 블록이 있는 부분에 대한 테마 적용.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src


#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
  (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist)))
#+end_src

=org-keywords= 설정

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
#+end_src

=org-agenda=, =org-capture= 설정

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/inbox.org"
                         "~/org/gtd.org"
                         "~/org/tickler.org"))
(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file "~/org/inbox.org")
                               "* TODO %i%?")
                              ("T" "Tickler" entry
                               (file+headline "~/org/tickler.org" "Tickler")
                               "* %i%? \n %U")))
(setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                           ("~/org/someday.org" :level . 1)
                           ("~/org/tickler.org" :maxlevel . 2)))
;; (setq org-agenda-custom-commands
;;       '(("o" "At the office" tags-todo "@office"
;;          ((org-agenda-overriding-header "Office")
;;           (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(defun org-current-is-todo ()
  (string= "TODO" (org-get-todo-state)))

(setq org-log-done 'time)
(setq org-agenda-start-with-log-mode '(closed))
(setq org-agenda-window-setup 'current-window)
#+end_src

org babel extends

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (ditaa . t)
   (java . t)
   (go . t)
   (js . t)
   (shell . t)
   (plantuml . t)
   ))
#+end_src

tag-list
#+begin_src emacs-lisp
(setq org-tag-alist '(("crypt" . ?c)
                      ("@home" . ?h)
                      ("@office" . ?o)))

;;(global-undo-tree-mode)
#+end_src

org babel alist
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("sh" . "src shell :noweb yes :results drawer \n"))
(add-to-list 'org-structure-template-alist
             '("t" . "src typescript :cmdline -t es6 \n"))
(add-to-list 'org-structure-template-alist
             '("u" . "src plantuml :file ?.png :cmdline -charset UTF-8\n"))
#+end_src

자동 들여쓰기 방지
#+begin_src emacs-lisp
(setq org-adapt-indentation nil)
#+end_src

github스타일의 내보내기
#+begin_src emacs-lisp
(require 'ox-gfm)
#+end_src


[[https://github.com/bastibe/org-journal][org-journal]]

#+begin_src emacs-lisp
(require 'org-journal)
(setq org-journal-dir "~/org/journal/"
      org-journal-file-format "%Y/%Y%m.org"
      org-journal-file-type 'monthly
      org-journal-file-header "#+title: %Y.%m Journal \n#+startup: folded")

(setq org-agenda-files (append
                        org-agenda-files
                        (directory-files-recursively org-journal-dir "\\.org$")))
#+end_src

** Interactive functions
<<sec:defuns>>

=*scratch*= 버퍼를 삭제하지 않고, 버퍼를 초기화하도록 변경한다.

#+begin_src emacs-lisp
(add-hook 'kill-buffer-query-functions
          (lambda() (not (equal (buffer-name) "*scratch*"))))

(defun kill-this-buffer-unless-scratch ()
  "Works like `kill-this-buffer' unless the current buffer is the
,*scratch* buffer. In witch case the buffer content is deleted and
the buffer is buried."
  (interactive)
  (if (not (string= (buffer-name) "*scratch*"))
      (kill-this-buffer)
    (delete-region (point-min) (point-max))
    (switch-to-buffer (other-buffer))
    (bury-buffer "*scratch*")))
#+end_src

줄 복사

#+begin_src emacs-lisp
(defun duplicate-thing (comment)
  "Duplicates the current line, or the region if active. If an argument is
given, the duplicated region will be commented out."
  (interactive "P")
  (save-excursion
    (let ((start (if (region-active-p) (region-beginning) (point-at-bol)))
          (end   (if (region-active-p) (region-end) (point-at-eol)))
          (fill-column most-positive-fixnum))
      (goto-char end)
      (unless (region-active-p)
        (newline))
      (insert (buffer-substring start end))
      (when comment (comment-region start end)))))
#+end_src

To tidy up a buffer we define this function borrowed from [[https://github.com/simenheg][simenheg]].

#+begin_src emacs-lisp
(defun tidy ()
  "Ident, untabify and unwhitespacify current buffer, or region if active."
  (interactive)
  (let ((beg (if (region-active-p) (region-beginning) (point-min)))
        (end (if (region-active-p) (region-end) (point-max))))
    (indent-region beg end)
    (whitespace-cleanup)
    (untabify beg (if (< end (point-max)) end (point-max)))))
#+end_src

** Advice

An advice can be given to a function to make it behave differently. This
advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with
the value.

#+begin_src emacs-lisp
(defadvice eval-last-sexp (around replace-sexp (arg) activate)
  "Replace sexp when called with a prefix argument."
  (if arg
      (let ((pos (point)))
        ad-do-it
        (goto-char pos)
        (backward-kill-sexp)
        (forward-sexp))
    ad-do-it))
#+end_src

=load-theme= 를 사용 시, 현재의 테마를 비활성화하고 로딩하도록 설정한다.

#+begin_src emacs-lisp
(defadvice load-theme
    (before disable-before-load (theme &optional no-confirm no-enable) activate)
  (mapc 'disable-theme custom-enabled-themes))
#+end_src

미니버퍼 및 모드라인 스케일 옵션 추가

#+begin_src emacs-lisp
(let* ((default (face-attribute 'default :height))
       (size default))

  (defun global-scale-default ()
    (interactive)
    (global-scale-internal (setq size default)))

  (defun global-scale-up ()
    (interactive)
    (global-scale-internal (setq size (+ size 20))))

  (defun global-scale-down ()
    (interactive)
    (global-scale-internal (setq size (- size 20))))

  (defun global-scale-internal (arg)
    (set-face-attribute 'default (selected-frame) :height arg)
    ;;(set-temporary-overlay-map
    (set-transient-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "C-=") 'global-scale-up)
       (define-key map (kbd "C-+") 'global-scale-up)
       (define-key map (kbd "C--") 'global-scale-down)
       (define-key map (kbd "C-0") 'global-scale-default) map))))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

** Treemacs
#+begin_src emacs-lisp
(require 'treemacs)
(require 'treemacs-evil)
(require 'treemacs-projectile)

(setq treemacs-read-string-input 'from-minibuffer; 입력창을 이맥스 기본 미니버퍼에서 실행
      ;; treemacs-width 35
      ;; treemacs-git-mode 'deferred
      treemacs-no-png-images t)

#+end_src

** Mail
#+begin_src emacs-lisp
;;; Mail
;;(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
(require 'mu4e)

;; This is set to 't' to avoid mail syncing issues when using mbsync
(setq mu4e-change-filenames-when-moving t)
;; Refresh mail using isync every 5 minutes
;; (setq mu4e-update-interval (* 5 60))
(setq mu4e-get-mail-command "mbsync -a")
;; don't have to confirm when quitting:
(setq mu4e-confirm-quit nil)
;; number of visible headers in horizontal split view:
(setq mu4e-headers-visible-lines 20)
;; hide annoying "mu4e Retrieving mail..." msg in mini buffer:
;; (setq mu4e-hide-index-messages t)
;; customize the reply-quote-string:
(setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")
;; M-x find-function RET message-citation-line-format for docs:
(setq message-citation-line-function 'message-insert-formatted-citation-line)
;; by default do not show related emails:
(setq mu4e-headers-include-related nil)

(setq mu4e-headers-date-format "%Y-%m-%d")

(setq mu4e-headers-fields '((:human-date    . 12)
                            (:flags         . 5)
                            (:from          . 22)
                            (:subject       . nil)))

(setq mu4e-contexts
      (list
       ;; Personal account
       (make-mu4e-context
        :name "gmail"
        :match-func
        (lambda (msg)
          (when msg
            (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "thkim256@gmail.com")
                (user-full-name    . "thkim256@gmail.com")
                (mu4e-drafts-folder  . "/gmail/[Gmail]/Drafts")
                (mu4e-sent-folder  . "/gmail/[Gmail]/Sent Mail")
                (mu4e-refile-folder  . "/gmail/[Gmail]/All Mail")
                (mu4e-trash-folder  . "/gmail/[Gmail]/Trash")))
       ))

(setq mu4e-maildir-shortcuts
      '(("/Inbox"             . ?i)
        ("/gmail/[Gmail]/Sent Mail" . ?s)
        ("/gmail/[Gmail]/Trash"     . ?t)
        ("/gmail/[Gmail]/Drafts"    . ?d)
        ("/gmail/[Gmail]/All Mail"  . ?a)))

#+end_src

mu4e-alert

#+begin_src emacs-lisp
(require 'mu4e-alert)
;; (setq mu4e-alert-email-notification-types '(subject))
;; Choose the style you prefer for desktop notifications
;; If you are on Linux you can use
;; 1. notifications - Emacs lisp implementation of the Desktop Notifications API
;; 2. libnotify     - Notifications using the `notify-send' program, requires `notify-send' to be in PATH
;;
;; On Mac OSX you can set style to
;; 1. notifier      - Notifications using the `terminal-notifier' program, requires `terminal-notifier' to be in PATH
;; 1. growl         - Notifications using the `growl' program, requires `growlnotify' to be in PATH
(when (memq window-system '(mac ns))
  (mu4e-alert-set-default-style 'notifier))
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+end_src


* Mode specific
** Shell

Inspired by [[https://github.com/torenord/.emacs.d][torenord]], I maintain quick access to shell buffers with bindings
~M-1~ to ~M-9~. In addition, the ~M-§~ (on an international English
keyboard) toggles between the last visited shell, and the last visited
non-shell buffer. The following functions facilitate this, and are bound in
the [[Key bindings]] section.

#+begin_src emacs-lisp
(let ((last-vterm ""))
  (defun toggle-vterm ()
    (interactive)
    (cond ((string-match-p "^\\vterm<[1-9][0-9]*>$" (buffer-name))
           (goto-non-vterm-buffer))
          ((get-buffer last-vterm) (switch-to-buffer last-vterm))
          (t (vterm (setq last-vterm "vterm<1>")))))

  (defun switch-vterm (n)
    (let ((buffer-name (format "vterm<%d>" n)))
      (setq last-vterm buffer-name)
      (cond ((get-buffer buffer-name)
             (switch-to-buffer buffer-name))
            (t (vterm buffer-name)
               (rename-buffer buffer-name)))))

  (defun goto-non-vterm-buffer ()
    (let* ((r "^\\vterm<[1-9][0-9]*>$")
           (vterm-buffer-p (lambda (b) (string-match-p r (buffer-name b))))
           (non-vterms (cl-remove-if vterm-buffer-p (buffer-list))))
      (when non-vterms
        (switch-to-buffer (car non-vterms))))))
#+end_src

Don't query whether or not the ~shell~-buffer should be killed, just kill
it.

#+begin_src emacs-lisp
(defadvice vterm (after kill-with-no-query nil activate)
  (set-process-query-on-exit-flag (get-buffer-process ad-return-value) nil))
#+end_src

Use zsh:

#+begin_src emacs-lisp
(setq vterm-shell "/bin/zsh")
#+end_src

I'd like the =C-l= to work more like the standard terminal (which works
like running =clear=), and resolve this by simply removing the
buffer-content. Mind that this is not how =clear= works, it simply adds a
bunch of newlines, and puts the prompt at the top of the window, so it
does not remove anything. In Emacs removing stuff is less of a worry,
since we can always undo!

#+begin_src emacs-lisp
(defun clear-comint ()
  "Runs `comint-truncate-buffer' with the
`comint-buffer-maximum-size' set to zero."
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+end_src

Disable Line Mode
#+begin_src emacs-lisp
(add-hook 'vterm-mode-hook
          (lambda ()
            (display-line-numbers-mode 0)))
#+end_src

Bash indent width
#+begin_src emacs-lisp
(setq sh-basic-offset 2)
#+end_src

** Elfeed
RSS Reader
#+begin_src emacs-lisp
(require 'elfeed)
(setq-default elfeed-search-filter "@1-month-ago +unread ")
(setq elfeed-show-entry-switch 'switch-to-buffer) ;; display-buffer
;; (setq browse-url-browser-function 'eww-browse-url)

(require 'elfeed-org)
(elfeed-org)
(setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
#+end_src

** View Large File
#+begin_src emacs-lisp
(require 'vlf-setup)
#+end_src

** Lsp

LSP mode works really well, especially with languages like Java, which
traditionally has had quite poor Emacs support.

#+begin_src emacs-lisp
(require 'lsp-mode)
(require 'lsp-ui)
(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
(add-hook 'lsp-mode-hook (lambda ()
                           (let ((lsp-keymap-prefix "C-c l"))
                             (lsp-enable-which-key-integration))

                           (setq gc-cons-threshold 100000000
                                 lsp-idle-delay 0.200
                                 lsp-log-io nil
                                 lsp-ui-doc-enable nil
                                 lsp-lens-enable nil
                                 lsp-enable-links nil ; treemacs crash
                                 lsp-ui-sideline-enable nil
                                 lsp-enable-symbol-highlighting nil
                                 lsp-headerline-breadcrumb-enable nil
                                 ;; lsp-completion-provider :capf
                                 read-process-output-max (* 1024 1024))

                           ;; watch ignored
                           (add-to-list 'lsp-file-watch-ignored-directories
                                        "[/\\\\]\\.artifacts\\'"
                                        "[/\\\\][^/\\\\]*\\.\\(json\\|html\\|yaml\\)$"
                                        )
                           ))
#+end_src

** Dap

#+begin_src emacs-lisp
;;https://emacs-lsp.github.io/dap-mode/page/configuration/#dap-mode-configuration
(dap-mode t)
;; The modes below are optional
(dap-ui-mode t)
;; enables mouse hover support
(dap-tooltip-mode t)
;; use tooltips for mouse hover
;; if it is not enabled `dap-mode' will use the minibuffer.
(tooltip-mode nil)
;; displays floating panel with debug buttons
;; requies emacs 26+
(dap-ui-controls-mode nil)
#+end_src

** Lisp
#+begin_src emacs-lisp
(dolist (mode '(ielm-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
                scheme-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+end_src

** Json
indent 설정
#+begin_src emacs-lisp
(require 'js2-mode)
(add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level tab-width)))
#+end_src

** Yaml
들여쓰기 표시 활성화
#+begin_src emacs-lisp
(add-hook 'yaml-mode-hook
          #'(lambda ()
             (highlight-indentation-mode)
             ;; (highlight-indentation-current-column-mode)
             ))
#+end_src
** Ansi Color
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC
** Go
Golang 관련 설정

#+begin_src emacs-lisp
(require 'go-mode)

(defun lsp-go-install-save-hooks ()
  (setq tab-width 2)
  (setq indent-tabs-mode t)
  (setq compile-command "go test -v .")

  (hs-minor-mode t)
  (local-set-key (kbd "C-c C-c") 'compile)

  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t)
  (add-hook 'before-save-hook 'gofmt-before-save))

(add-hook 'go-mode-hook #'lsp-deferred)
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

go debug
#+begin_src emacs-lisp
;; (require 'dap-go)
;; go install github.com/go-delve/delve/cmd/dlv@latest
(require 'dap-dlv-go)
#+end_src

** Java
#+begin_src emacs-lisp
(require 'lsp-java)
(add-hook 'java-mode-hook #'lsp)
;; JDK 8 지원 버전 (최신 버전은 jdk 11)
(setq lsp-java-jdt-download-url "https://download.eclipse.org/jdtls/milestones/0.57.0/jdt-language-server-0.57.0-202006172108.tar.gz")

;; spring boot
(require 'lsp-java-boot)
(add-hook 'lsp-mode-hook #'lsp-lens-mode)
(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)

;; lombok설정. 절대 경로 필요
(setq lombok-jar-path (concat (getenv "HOME") "/.emacs.d/bin/lombok/lombok-1.18.20.jar"))
;; lombok
;; (setq lsp-java-vmargs '("-noverify"
;;                         "-Xmx1G"
;;                         "-XX:+UseG1GC"
;;                         "-XX:+UseStringDeduplication"))
(add-to-list 'lsp-java-vmargs (concat "-javaagent:" lombok-jar-path))
#+end_src

** Plantuml
default는 로컬에 있는 jar 형식을 사용

#+begin_src emacs-lisp
(require 'plantuml-mode)
(setq plantuml-default-exec-mode 'jar)
(setq plantuml-jar-path (concat user-emacs-directory "/bin/plantuml/plantuml.jar"))

;; preview type
(setq plantuml-output-type "png")

;; org-babel
(setq org-plantuml-jar-path
      (expand-file-name (concat user-emacs-directory "/bin/plantuml/plantuml.jar")))
;; (setq org-ditaa-jar-path
;;       (expand-file-name (concat user-emacs-directory "/bin/ditaa/ditaa0_9.jar")))
#+end_src

** Kubernetes
#+begin_src emacs-lisp
(require 'k8s-mode)
;; Set indent offset
(setq k8s-indent-offset nil)
;; The site docs URL
(setq k8s-site-docs-url "https://kubernetes.io/docs/reference/generated/kubernetes-api/")
#+end_src

* Key bindings

c.f. [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]]

#+begin_src emacs-lisp
(defvar custom-bindings-map (make-keymap)
  "A keymap for custom bindings.")
#+end_src

** Bindings for language

#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (global-set-key (kbd "<S-kana>") 'toggle-input-method)
  (global-set-key (kbd "<kana>") 'toggle-input-method))
#+end_src

** Bindings for eval-defun

#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-defun)
(define-key lisp-interaction-mode-map (kbd "C-c C-c") 'eval-defun)
#+end_src

** Bindings for translate

#+begin_src emacs-lisp
(global-set-key (kbd "C-c T") 'google-translate-at-point)
#+end_src

** Bindings for [[https://github.com/magnars/expand-region.el][expand-region]]

#+begin_src emacs-lisp
(define-key custom-bindings-map (kbd "C->")  'er/expand-region)
(define-key custom-bindings-map (kbd "C-<")  'er/contract-region)
#+end_src

** Bindings for [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

#+begin_src emacs-lisp
(define-key custom-bindings-map (kbd "C-c e")  'mc/edit-lines)
(define-key custom-bindings-map (kbd "C-c a")  'mc/mark-all-like-this)
(define-key custom-bindings-map (kbd "C-c n")  'mc/mark-next-like-this)
#+end_src

** Bindings for [[https://magit.vc/][Magit]]

#+begin_src emacs-lisp
(define-key custom-bindings-map (kbd "C-c m") 'magit-status)
#+end_src

** Bindings for [[https://github.com/abo-abo/swiper][Counsel]]

#+begin_src emacs-lisp
(global-set-key (kbd "C-s")     'swiper-isearch)
(global-set-key (kbd "C-r")     'swiper-isearch-backward)
(global-set-key (kbd "M-x")     'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y")     'counsel-yank-pop)
(global-set-key (kbd "C-x b")   'ivy-switch-buffer)
(global-set-key (kbd "C-c b")   'counsel-bookmark)
(global-set-key (kbd "C-c i")   'counsel-imenu)
(global-set-key (kbd "C-c r")   'counsel-recentf)
(define-key ivy-mode-map (kbd "C-l") 'ivy-backward-kill-word)
#+end_src

** Bindings for [[http://company-mode.github.io/][company-mode]]

#+begin_src emacs-lisp
(define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "<tab>") 'company-complete)
#+end_src

** Bindings for [[https://github.com/bbatsov/projectile][Projectile]]

#+begin_src emacs-lisp
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Bindings for [[https://github.com/rnkn/olivetti][Olivetti]]

#+begin_src emacs-lisp
(define-key custom-bindings-map (kbd "C-c o") 'olivetti-mode)
#+end_src

** Bindings for Org

#+begin_src emacs-lisp
(define-key custom-bindings-map (kbd "C-c a")   'org-agenda)
(define-key custom-bindings-map (kbd "C-c c")   'org-capture)
(define-key custom-bindings-map (kbd "C-c t")
  (lambda () (interactive) (org-agenda nil "n")))
(define-key custom-bindings-map (kbd "C-c j")   'org-journal-open-current-journal-file)
(define-key custom-bindings-map (kbd "C-c J")   'org-journal-new-entry)
#+end_src

** Bindings for Mu4e

#+begin_src emacs-lisp
(global-set-key (kbd "<f5>")
                (lambda ()
                  (interactive)
                  (mu4e-headers-search "date:7d..now")))
#+end_src
** Bindings for functions defined [[sec:defuns][above]].

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-f") 'toggle-frame-fullscreen)

(define-key custom-bindings-map (kbd "C-x k")   'kill-this-buffer-unless-scratch)
(define-key custom-bindings-map (kbd "C-c C-0") 'global-scale-default)
(define-key custom-bindings-map (kbd "C-c C-=") 'global-scale-up)
(define-key custom-bindings-map (kbd "C-c C-+") 'global-scale-up)
(define-key custom-bindings-map (kbd "C-c C--") 'global-scale-down)
(define-key custom-bindings-map (kbd "<C-tab>") 'tidy)
;; (define-key custom-bindings-map (kbd "C-c d")   'duplicate-thing)
;; (define-key custom-bindings-map (kbd "C-c .")   'toggle-vterm)
;; (define-key custom-bindings-map (kbd "C-c .")   (cycle-themes))
(dolist (n (number-sequence 1 9))
  (global-set-key (kbd (concat "M-" (int-to-string n)))
                  (lambda () (interactive) (switch-vterm n))))
#+end_src

Lastly we need to activate the map by creating and activating the
=minor-mode=.

#+begin_src emacs-lisp
(define-minor-mode custom-bindings-mode
  "A mode that activates custom-bindings."
  t nil custom-bindings-map)
#+end_src
